import pygame
from random import choice
import time


BG_COLOR = (50, 50, 50)
SIZE = (509, 509)

COLORS = ((227, 76, 0), (227, 227, 0), (57, 227, 0), (0, 227, 227), (113, 0, 227), (227, 0, 113))

window = pygame.display.set_mode(SIZE)
screen = pygame.Surface(SIZE)


class Changer:
    def __init__(self, court):
        self.sequence = []
        self.dt = 0
        self.court = court

    def __call__(self, **kwargs):
        if len(kwargs) != 0:
            if 'tile' in kwargs:
                if not kwargs['tile'] in self.sequence:
                    if len(self.sequence) < 1:
                        self.dt = 0
                        self.sequence.append(kwargs['tile'])
                        kwargs['tile'].is_selected = True
                    else:
                        self.sequence[0].castling(kwargs['tile'], self.court)
                        self.sequence = []
            if 'time' in kwargs:
                self.dt += kwargs['time']
                if self.dt > 0.025:
                    self.dt = 0
                    if self.sequence:
                        self.sequence[0].is_selected = False
                        self.sequence = []


class Plitka:
    color = (150, 40, 40)
    DEACTIVE_COLOR = (150, 150, 150)
    COLORS = ((227, 76, 0), (227, 227, 0), (57, 227, 0), (0, 227, 227), (113, 0, 227), (227, 0, 113))
    CLICKED_COLOR = (255, 255, 255)  # цвет когда плитка нажата
    HOVER_COLOR = (180, 150, 150)   # цвет плиток, на которые наведен курсор

    def __init__(self, x, y, surface, color=color):
        self.row = x
        self.col = y
        self.image = pygame.Surface((50, 50))
        self.rect = self.image.get_rect()
        self.rect.x = 0
        self.rect.y = 0
        self.auto_set_cords()
        self.color = choice(self.COLORS)
        self.surface = surface
        self.image.fill(self.color)
        self.is_selected = False
        self.is_deactive = False

    def set_cords(self, r, c):
        self.row = r
        self.col = c
        self.auto_set_cords()

    # задаются координаты для отрисовки плиток в будующем
    def auto_set_cords(self):
        self.rect.x = self.col * (self.image.get_width() + 1)
        self.rect.y = self.row * (self.image.get_height() + 1)

    # отрисовка плиток
    def draw(self):
        self.change_color()
        self.surface.blit(self.image, (self.rect.x, self.rect.y))

    # отрисовка плиток, которые меняют местами
    def castling(self, obj, court):
        if abs(obj.row - self.row) == 1 and abs(obj.col - self.col) == 0\
                or abs(obj.row - self.row) == 0 and abs(obj.col - self.col) == 1:
            self.row, obj.row = obj.row, self.row
            self.col, obj.col = obj.col, self.col
            court[self.row][self.col] = self
            court[obj.row][obj.col] = obj
            self.auto_set_cords()
            obj.auto_set_cords()
        self.is_selected = False
        obj.is_selected = False

    # меняет цвета плиток, если на нее кликнули
    def change_color(self):
        if self.clicked() or self.is_selected:
            self.image.fill(self.CLICKED_COLOR)
        elif self.collide_cursor():
            pygame.draw.rect(self.surface, self.HOVER_COLOR, self.rect, 4)
        elif self.is_deactive:
            pygame.draw.rect(self.surface, self.CLICKED_COLOR, self.rect, 4)
        else:
            self.image.fill(self.color)

    # отслеживает нажата ли какая нибудь плитка
    def clicked(self):
        if self.collide_cursor():
            return pygame.mouse.get_pressed() == (1, 0, 0)  # если зажата левая кнопка мыши

    # определяет находится ли курсор над текущей плиткой
    def collide_cursor(self):
        mx, my = pygame.mouse.get_pos()
        return self.rect.left < mx < self.rect.right and self.rect.top < my < self.rect.bottom
        # возврат выполнения этого условия, либо True, либо False


class Court:
    skel = [[None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ],
            [None, None, None, None, None, None, None, None, None, None, ]]

    def __init__(self, surface):
        self.surf = surface
        self.court = self.skel
        self.changer = Changer(self.court)
        self.time = 0

    def generate(self):
        clear = True
        for ei in range(len(self.court[0])):
            if self.court[0][ei] is None:
                clear = False
                self.court[0][ei] = Plitka(x=0, y=ei, surface=self.surf)
        return clear

    def process(self):
        self.generate()
        dt = time.time()
        for r in range(len(self.court) - 1, -1, -1):
            for c in range(len(self.court) - 1, -1, -1):
                if self.court[r][c] is None:
                    if r > 0 and self.court[r - 1][c] is not None:
                        obj = self.court[r - 1][c]
                        obj.set_cords(r, c)
                        self.court[r][c] = obj
                        self.court[r - 1][c] = None
                        obj.draw()
                else:
                    self.court[r][c].draw()
        self.changer(time=time.time() - dt)


clock = pygame.time.Clock()

court = Court(screen)
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    screen.fill(BG_COLOR)
    clock.tick(10)

    court.process()

    window.blit(screen, (0, 0))
    pygame.display.flip()
